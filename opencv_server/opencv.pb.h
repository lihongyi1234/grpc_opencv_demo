// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opencv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opencv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opencv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opencv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opencv_2eproto;
namespace helloopencv {
class ImageProto;
struct ImageProtoDefaultTypeInternal;
extern ImageProtoDefaultTypeInternal _ImageProto_default_instance_;
class OpencvReply;
struct OpencvReplyDefaultTypeInternal;
extern OpencvReplyDefaultTypeInternal _OpencvReply_default_instance_;
class OpencvRequest;
struct OpencvRequestDefaultTypeInternal;
extern OpencvRequestDefaultTypeInternal _OpencvRequest_default_instance_;
}  // namespace helloopencv
PROTOBUF_NAMESPACE_OPEN
template<> ::helloopencv::ImageProto* Arena::CreateMaybeMessage<::helloopencv::ImageProto>(Arena*);
template<> ::helloopencv::OpencvReply* Arena::CreateMaybeMessage<::helloopencv::OpencvReply>(Arena*);
template<> ::helloopencv::OpencvRequest* Arena::CreateMaybeMessage<::helloopencv::OpencvRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace helloopencv {

enum ImageProto_Depth : int {
  ImageProto_Depth_UCHAR_8 = 0,
  ImageProto_Depth_INT_16 = 1,
  ImageProto_Depth_UINT_16 = 2,
  ImageProto_Depth_INT_32 = 3,
  ImageProto_Depth_FLOAT_32 = 4,
  ImageProto_Depth_DOUBLE_64 = 5,
  ImageProto_Depth_ImageProto_Depth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ImageProto_Depth_ImageProto_Depth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ImageProto_Depth_IsValid(int value);
constexpr ImageProto_Depth ImageProto_Depth_Depth_MIN = ImageProto_Depth_UCHAR_8;
constexpr ImageProto_Depth ImageProto_Depth_Depth_MAX = ImageProto_Depth_DOUBLE_64;
constexpr int ImageProto_Depth_Depth_ARRAYSIZE = ImageProto_Depth_Depth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageProto_Depth_descriptor();
template<typename T>
inline const std::string& ImageProto_Depth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageProto_Depth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageProto_Depth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageProto_Depth_descriptor(), enum_t_value);
}
inline bool ImageProto_Depth_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageProto_Depth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageProto_Depth>(
    ImageProto_Depth_descriptor(), name, value);
}
// ===================================================================

class ImageProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloopencv.ImageProto) */ {
 public:
  inline ImageProto() : ImageProto(nullptr) {}
  ~ImageProto() override;
  explicit constexpr ImageProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageProto(const ImageProto& from);
  ImageProto(ImageProto&& from) noexcept
    : ImageProto() {
    *this = ::std::move(from);
  }

  inline ImageProto& operator=(const ImageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageProto& operator=(ImageProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageProto* internal_default_instance() {
    return reinterpret_cast<const ImageProto*>(
               &_ImageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageProto& a, ImageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloopencv.ImageProto";
  }
  protected:
  explicit ImageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImageProto_Depth Depth;
  static constexpr Depth UCHAR_8 =
    ImageProto_Depth_UCHAR_8;
  static constexpr Depth INT_16 =
    ImageProto_Depth_INT_16;
  static constexpr Depth UINT_16 =
    ImageProto_Depth_UINT_16;
  static constexpr Depth INT_32 =
    ImageProto_Depth_INT_32;
  static constexpr Depth FLOAT_32 =
    ImageProto_Depth_FLOAT_32;
  static constexpr Depth DOUBLE_64 =
    ImageProto_Depth_DOUBLE_64;
  static inline bool Depth_IsValid(int value) {
    return ImageProto_Depth_IsValid(value);
  }
  static constexpr Depth Depth_MIN =
    ImageProto_Depth_Depth_MIN;
  static constexpr Depth Depth_MAX =
    ImageProto_Depth_Depth_MAX;
  static constexpr int Depth_ARRAYSIZE =
    ImageProto_Depth_Depth_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Depth_descriptor() {
    return ImageProto_Depth_descriptor();
  }
  template<typename T>
  static inline const std::string& Depth_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Depth>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Depth_Name.");
    return ImageProto_Depth_Name(enum_t_value);
  }
  static inline bool Depth_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Depth* value) {
    return ImageProto_Depth_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataBytesFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kDepthFieldNumber = 4,
  };
  // repeated bytes data_bytes = 5;
  int data_bytes_size() const;
  private:
  int _internal_data_bytes_size() const;
  public:
  void clear_data_bytes();
  const std::string& data_bytes(int index) const;
  std::string* mutable_data_bytes(int index);
  void set_data_bytes(int index, const std::string& value);
  void set_data_bytes(int index, std::string&& value);
  void set_data_bytes(int index, const char* value);
  void set_data_bytes(int index, const void* value, size_t size);
  std::string* add_data_bytes();
  void add_data_bytes(const std::string& value);
  void add_data_bytes(std::string&& value);
  void add_data_bytes(const char* value);
  void add_data_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_bytes();
  private:
  const std::string& _internal_data_bytes(int index) const;
  std::string* _internal_add_data_bytes();
  public:

  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 channels = 3;
  void clear_channels();
  int32_t channels() const;
  void set_channels(int32_t value);
  private:
  int32_t _internal_channels() const;
  void _internal_set_channels(int32_t value);
  public:

  // .helloopencv.ImageProto.Depth depth = 4;
  void clear_depth();
  ::helloopencv::ImageProto_Depth depth() const;
  void set_depth(::helloopencv::ImageProto_Depth value);
  private:
  ::helloopencv::ImageProto_Depth _internal_depth() const;
  void _internal_set_depth(::helloopencv::ImageProto_Depth value);
  public:

  // @@protoc_insertion_point(class_scope:helloopencv.ImageProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_bytes_;
  int32_t width_;
  int32_t height_;
  int32_t channels_;
  int depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencv_2eproto;
};
// -------------------------------------------------------------------

class OpencvRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloopencv.OpencvRequest) */ {
 public:
  inline OpencvRequest() : OpencvRequest(nullptr) {}
  ~OpencvRequest() override;
  explicit constexpr OpencvRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpencvRequest(const OpencvRequest& from);
  OpencvRequest(OpencvRequest&& from) noexcept
    : OpencvRequest() {
    *this = ::std::move(from);
  }

  inline OpencvRequest& operator=(const OpencvRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpencvRequest& operator=(OpencvRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpencvRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpencvRequest* internal_default_instance() {
    return reinterpret_cast<const OpencvRequest*>(
               &_OpencvRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpencvRequest& a, OpencvRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpencvRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpencvRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpencvRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpencvRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpencvRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpencvRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpencvRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloopencv.OpencvRequest";
  }
  protected:
  explicit OpencvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .helloopencv.ImageProto images = 2;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::helloopencv::ImageProto* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helloopencv::ImageProto >*
      mutable_images();
  private:
  const ::helloopencv::ImageProto& _internal_images(int index) const;
  ::helloopencv::ImageProto* _internal_add_images();
  public:
  const ::helloopencv::ImageProto& images(int index) const;
  ::helloopencv::ImageProto* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helloopencv::ImageProto >&
      images() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:helloopencv.OpencvRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helloopencv::ImageProto > images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencv_2eproto;
};
// -------------------------------------------------------------------

class OpencvReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloopencv.OpencvReply) */ {
 public:
  inline OpencvReply() : OpencvReply(nullptr) {}
  ~OpencvReply() override;
  explicit constexpr OpencvReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpencvReply(const OpencvReply& from);
  OpencvReply(OpencvReply&& from) noexcept
    : OpencvReply() {
    *this = ::std::move(from);
  }

  inline OpencvReply& operator=(const OpencvReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpencvReply& operator=(OpencvReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpencvReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpencvReply* internal_default_instance() {
    return reinterpret_cast<const OpencvReply*>(
               &_OpencvReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpencvReply& a, OpencvReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OpencvReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpencvReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpencvReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpencvReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpencvReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpencvReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpencvReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloopencv.OpencvReply";
  }
  protected:
  explicit OpencvReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kImagesFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .helloopencv.ImageProto images = 2;
  bool has_images() const;
  private:
  bool _internal_has_images() const;
  public:
  void clear_images();
  const ::helloopencv::ImageProto& images() const;
  PROTOBUF_NODISCARD ::helloopencv::ImageProto* release_images();
  ::helloopencv::ImageProto* mutable_images();
  void set_allocated_images(::helloopencv::ImageProto* images);
  private:
  const ::helloopencv::ImageProto& _internal_images() const;
  ::helloopencv::ImageProto* _internal_mutable_images();
  public:
  void unsafe_arena_set_allocated_images(
      ::helloopencv::ImageProto* images);
  ::helloopencv::ImageProto* unsafe_arena_release_images();

  // @@protoc_insertion_point(class_scope:helloopencv.OpencvReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::helloopencv::ImageProto* images_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opencv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageProto

// int32 width = 1;
inline void ImageProto::clear_width() {
  width_ = 0;
}
inline int32_t ImageProto::_internal_width() const {
  return width_;
}
inline int32_t ImageProto::width() const {
  // @@protoc_insertion_point(field_get:helloopencv.ImageProto.width)
  return _internal_width();
}
inline void ImageProto::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void ImageProto::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:helloopencv.ImageProto.width)
}

// int32 height = 2;
inline void ImageProto::clear_height() {
  height_ = 0;
}
inline int32_t ImageProto::_internal_height() const {
  return height_;
}
inline int32_t ImageProto::height() const {
  // @@protoc_insertion_point(field_get:helloopencv.ImageProto.height)
  return _internal_height();
}
inline void ImageProto::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void ImageProto::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:helloopencv.ImageProto.height)
}

// int32 channels = 3;
inline void ImageProto::clear_channels() {
  channels_ = 0;
}
inline int32_t ImageProto::_internal_channels() const {
  return channels_;
}
inline int32_t ImageProto::channels() const {
  // @@protoc_insertion_point(field_get:helloopencv.ImageProto.channels)
  return _internal_channels();
}
inline void ImageProto::_internal_set_channels(int32_t value) {
  
  channels_ = value;
}
inline void ImageProto::set_channels(int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:helloopencv.ImageProto.channels)
}

// .helloopencv.ImageProto.Depth depth = 4;
inline void ImageProto::clear_depth() {
  depth_ = 0;
}
inline ::helloopencv::ImageProto_Depth ImageProto::_internal_depth() const {
  return static_cast< ::helloopencv::ImageProto_Depth >(depth_);
}
inline ::helloopencv::ImageProto_Depth ImageProto::depth() const {
  // @@protoc_insertion_point(field_get:helloopencv.ImageProto.depth)
  return _internal_depth();
}
inline void ImageProto::_internal_set_depth(::helloopencv::ImageProto_Depth value) {
  
  depth_ = value;
}
inline void ImageProto::set_depth(::helloopencv::ImageProto_Depth value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:helloopencv.ImageProto.depth)
}

// repeated bytes data_bytes = 5;
inline int ImageProto::_internal_data_bytes_size() const {
  return data_bytes_.size();
}
inline int ImageProto::data_bytes_size() const {
  return _internal_data_bytes_size();
}
inline void ImageProto::clear_data_bytes() {
  data_bytes_.Clear();
}
inline std::string* ImageProto::add_data_bytes() {
  std::string* _s = _internal_add_data_bytes();
  // @@protoc_insertion_point(field_add_mutable:helloopencv.ImageProto.data_bytes)
  return _s;
}
inline const std::string& ImageProto::_internal_data_bytes(int index) const {
  return data_bytes_.Get(index);
}
inline const std::string& ImageProto::data_bytes(int index) const {
  // @@protoc_insertion_point(field_get:helloopencv.ImageProto.data_bytes)
  return _internal_data_bytes(index);
}
inline std::string* ImageProto::mutable_data_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:helloopencv.ImageProto.data_bytes)
  return data_bytes_.Mutable(index);
}
inline void ImageProto::set_data_bytes(int index, const std::string& value) {
  data_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:helloopencv.ImageProto.data_bytes)
}
inline void ImageProto::set_data_bytes(int index, std::string&& value) {
  data_bytes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:helloopencv.ImageProto.data_bytes)
}
inline void ImageProto::set_data_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:helloopencv.ImageProto.data_bytes)
}
inline void ImageProto::set_data_bytes(int index, const void* value, size_t size) {
  data_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloopencv.ImageProto.data_bytes)
}
inline std::string* ImageProto::_internal_add_data_bytes() {
  return data_bytes_.Add();
}
inline void ImageProto::add_data_bytes(const std::string& value) {
  data_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:helloopencv.ImageProto.data_bytes)
}
inline void ImageProto::add_data_bytes(std::string&& value) {
  data_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:helloopencv.ImageProto.data_bytes)
}
inline void ImageProto::add_data_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:helloopencv.ImageProto.data_bytes)
}
inline void ImageProto::add_data_bytes(const void* value, size_t size) {
  data_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:helloopencv.ImageProto.data_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ImageProto::data_bytes() const {
  // @@protoc_insertion_point(field_list:helloopencv.ImageProto.data_bytes)
  return data_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ImageProto::mutable_data_bytes() {
  // @@protoc_insertion_point(field_mutable_list:helloopencv.ImageProto.data_bytes)
  return &data_bytes_;
}

// -------------------------------------------------------------------

// OpencvRequest

// string name = 1;
inline void OpencvRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpencvRequest::name() const {
  // @@protoc_insertion_point(field_get:helloopencv.OpencvRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpencvRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloopencv.OpencvRequest.name)
}
inline std::string* OpencvRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:helloopencv.OpencvRequest.name)
  return _s;
}
inline const std::string& OpencvRequest::_internal_name() const {
  return name_.Get();
}
inline void OpencvRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpencvRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpencvRequest::release_name() {
  // @@protoc_insertion_point(field_release:helloopencv.OpencvRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpencvRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloopencv.OpencvRequest.name)
}

// repeated .helloopencv.ImageProto images = 2;
inline int OpencvRequest::_internal_images_size() const {
  return images_.size();
}
inline int OpencvRequest::images_size() const {
  return _internal_images_size();
}
inline void OpencvRequest::clear_images() {
  images_.Clear();
}
inline ::helloopencv::ImageProto* OpencvRequest::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:helloopencv.OpencvRequest.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helloopencv::ImageProto >*
OpencvRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:helloopencv.OpencvRequest.images)
  return &images_;
}
inline const ::helloopencv::ImageProto& OpencvRequest::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::helloopencv::ImageProto& OpencvRequest::images(int index) const {
  // @@protoc_insertion_point(field_get:helloopencv.OpencvRequest.images)
  return _internal_images(index);
}
inline ::helloopencv::ImageProto* OpencvRequest::_internal_add_images() {
  return images_.Add();
}
inline ::helloopencv::ImageProto* OpencvRequest::add_images() {
  ::helloopencv::ImageProto* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:helloopencv.OpencvRequest.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::helloopencv::ImageProto >&
OpencvRequest::images() const {
  // @@protoc_insertion_point(field_list:helloopencv.OpencvRequest.images)
  return images_;
}

// -------------------------------------------------------------------

// OpencvReply

// string message = 1;
inline void OpencvReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& OpencvReply::message() const {
  // @@protoc_insertion_point(field_get:helloopencv.OpencvReply.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpencvReply::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloopencv.OpencvReply.message)
}
inline std::string* OpencvReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:helloopencv.OpencvReply.message)
  return _s;
}
inline const std::string& OpencvReply::_internal_message() const {
  return message_.Get();
}
inline void OpencvReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpencvReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpencvReply::release_message() {
  // @@protoc_insertion_point(field_release:helloopencv.OpencvReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpencvReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloopencv.OpencvReply.message)
}

// .helloopencv.ImageProto images = 2;
inline bool OpencvReply::_internal_has_images() const {
  return this != internal_default_instance() && images_ != nullptr;
}
inline bool OpencvReply::has_images() const {
  return _internal_has_images();
}
inline void OpencvReply::clear_images() {
  if (GetArenaForAllocation() == nullptr && images_ != nullptr) {
    delete images_;
  }
  images_ = nullptr;
}
inline const ::helloopencv::ImageProto& OpencvReply::_internal_images() const {
  const ::helloopencv::ImageProto* p = images_;
  return p != nullptr ? *p : reinterpret_cast<const ::helloopencv::ImageProto&>(
      ::helloopencv::_ImageProto_default_instance_);
}
inline const ::helloopencv::ImageProto& OpencvReply::images() const {
  // @@protoc_insertion_point(field_get:helloopencv.OpencvReply.images)
  return _internal_images();
}
inline void OpencvReply::unsafe_arena_set_allocated_images(
    ::helloopencv::ImageProto* images) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(images_);
  }
  images_ = images;
  if (images) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:helloopencv.OpencvReply.images)
}
inline ::helloopencv::ImageProto* OpencvReply::release_images() {
  
  ::helloopencv::ImageProto* temp = images_;
  images_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::helloopencv::ImageProto* OpencvReply::unsafe_arena_release_images() {
  // @@protoc_insertion_point(field_release:helloopencv.OpencvReply.images)
  
  ::helloopencv::ImageProto* temp = images_;
  images_ = nullptr;
  return temp;
}
inline ::helloopencv::ImageProto* OpencvReply::_internal_mutable_images() {
  
  if (images_ == nullptr) {
    auto* p = CreateMaybeMessage<::helloopencv::ImageProto>(GetArenaForAllocation());
    images_ = p;
  }
  return images_;
}
inline ::helloopencv::ImageProto* OpencvReply::mutable_images() {
  ::helloopencv::ImageProto* _msg = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:helloopencv.OpencvReply.images)
  return _msg;
}
inline void OpencvReply::set_allocated_images(::helloopencv::ImageProto* images) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete images_;
  }
  if (images) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::helloopencv::ImageProto>::GetOwningArena(images);
    if (message_arena != submessage_arena) {
      images = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, images, submessage_arena);
    }
    
  } else {
    
  }
  images_ = images;
  // @@protoc_insertion_point(field_set_allocated:helloopencv.OpencvReply.images)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloopencv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::helloopencv::ImageProto_Depth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helloopencv::ImageProto_Depth>() {
  return ::helloopencv::ImageProto_Depth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opencv_2eproto
