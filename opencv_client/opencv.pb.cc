// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencv.proto

#include "opencv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace helloopencv {
constexpr ImageProto::ImageProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_bytes_()
  , width_(0)
  , height_(0)
  , channels_(0)
  , depth_(0)
{}
struct ImageProtoDefaultTypeInternal {
  constexpr ImageProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageProtoDefaultTypeInternal() {}
  union {
    ImageProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageProtoDefaultTypeInternal _ImageProto_default_instance_;
constexpr OpencvRequest::OpencvRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : images_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OpencvRequestDefaultTypeInternal {
  constexpr OpencvRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpencvRequestDefaultTypeInternal() {}
  union {
    OpencvRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpencvRequestDefaultTypeInternal _OpencvRequest_default_instance_;
constexpr OpencvReply::OpencvReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , images_(nullptr){}
struct OpencvReplyDefaultTypeInternal {
  constexpr OpencvReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpencvReplyDefaultTypeInternal() {}
  union {
    OpencvReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpencvReplyDefaultTypeInternal _OpencvReply_default_instance_;
}  // namespace helloopencv
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opencv_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_opencv_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opencv_2eproto = nullptr;

const uint32_t TableStruct_opencv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helloopencv::ImageProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::helloopencv::ImageProto, width_),
  PROTOBUF_FIELD_OFFSET(::helloopencv::ImageProto, height_),
  PROTOBUF_FIELD_OFFSET(::helloopencv::ImageProto, channels_),
  PROTOBUF_FIELD_OFFSET(::helloopencv::ImageProto, depth_),
  PROTOBUF_FIELD_OFFSET(::helloopencv::ImageProto, data_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helloopencv::OpencvRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::helloopencv::OpencvRequest, name_),
  PROTOBUF_FIELD_OFFSET(::helloopencv::OpencvRequest, images_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::helloopencv::OpencvReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::helloopencv::OpencvReply, message_),
  PROTOBUF_FIELD_OFFSET(::helloopencv::OpencvReply, images_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::helloopencv::ImageProto)},
  { 11, -1, -1, sizeof(::helloopencv::OpencvRequest)},
  { 19, -1, -1, sizeof(::helloopencv::OpencvReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helloopencv::_ImageProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helloopencv::_OpencvRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::helloopencv::_OpencvReply_default_instance_),
};

const char descriptor_table_protodef_opencv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014opencv.proto\022\013helloopencv\"\327\001\n\nImagePro"
  "to\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\020\n\010cha"
  "nnels\030\003 \001(\005\022,\n\005depth\030\004 \001(\0162\035.helloopencv"
  ".ImageProto.Depth\022\022\n\ndata_bytes\030\005 \003(\014\"V\n"
  "\005Depth\022\013\n\007UCHAR_8\020\000\022\n\n\006INT_16\020\001\022\013\n\007UINT_"
  "16\020\002\022\n\n\006INT_32\020\003\022\014\n\010FLOAT_32\020\004\022\r\n\tDOUBLE"
  "_64\020\005\"F\n\rOpencvRequest\022\014\n\004name\030\001 \001(\t\022\'\n\006"
  "images\030\002 \003(\0132\027.helloopencv.ImageProto\"G\n"
  "\013OpencvReply\022\017\n\007message\030\001 \001(\t\022\'\n\006images\030"
  "\002 \001(\0132\027.helloopencv.ImageProto2N\n\007Greete"
  "r\022C\n\tSayOpencv\022\032.helloopencv.OpencvReque"
  "st\032\030.helloopencv.OpencvReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opencv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opencv_2eproto = {
  false, false, 478, descriptor_table_protodef_opencv_2eproto, "opencv.proto", 
  &descriptor_table_opencv_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_opencv_2eproto::offsets,
  file_level_metadata_opencv_2eproto, file_level_enum_descriptors_opencv_2eproto, file_level_service_descriptors_opencv_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_opencv_2eproto_getter() {
  return &descriptor_table_opencv_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_opencv_2eproto(&descriptor_table_opencv_2eproto);
namespace helloopencv {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageProto_Depth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opencv_2eproto);
  return file_level_enum_descriptors_opencv_2eproto[0];
}
bool ImageProto_Depth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ImageProto_Depth ImageProto::UCHAR_8;
constexpr ImageProto_Depth ImageProto::INT_16;
constexpr ImageProto_Depth ImageProto::UINT_16;
constexpr ImageProto_Depth ImageProto::INT_32;
constexpr ImageProto_Depth ImageProto::FLOAT_32;
constexpr ImageProto_Depth ImageProto::DOUBLE_64;
constexpr ImageProto_Depth ImageProto::Depth_MIN;
constexpr ImageProto_Depth ImageProto::Depth_MAX;
constexpr int ImageProto::Depth_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ImageProto::_Internal {
 public:
};

ImageProto::ImageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_bytes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:helloopencv.ImageProto)
}
ImageProto::ImageProto(const ImageProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_bytes_(from.data_bytes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&width_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:helloopencv.ImageProto)
}

inline void ImageProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&width_)) + sizeof(depth_));
}

ImageProto::~ImageProto() {
  // @@protoc_insertion_point(destructor:helloopencv.ImageProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImageProto::ArenaDtor(void* object) {
  ImageProto* _this = reinterpret_cast< ImageProto* >(object);
  (void)_this;
}
void ImageProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageProto::Clear() {
// @@protoc_insertion_point(message_clear_start:helloopencv.ImageProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_bytes_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&width_)) + sizeof(depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .helloopencv.ImageProto.Depth depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_depth(static_cast<::helloopencv::ImageProto_Depth>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes data_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloopencv.ImageProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 channels = 3;
  if (this->_internal_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channels(), target);
  }

  // .helloopencv.ImageProto.Depth depth = 4;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_depth(), target);
  }

  // repeated bytes data_bytes = 5;
  for (int i = 0, n = this->_internal_data_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_data_bytes(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helloopencv.ImageProto)
  return target;
}

size_t ImageProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helloopencv.ImageProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data_bytes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_bytes_.size());
  for (int i = 0, n = data_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_bytes_.Get(i));
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 channels = 3;
  if (this->_internal_channels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
  }

  // .helloopencv.ImageProto.Depth depth = 4;
  if (this->_internal_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageProto::GetClassData() const { return &_class_data_; }

void ImageProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageProto *>(to)->MergeFrom(
      static_cast<const ImageProto &>(from));
}


void ImageProto::MergeFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloopencv.ImageProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_bytes_.MergeFrom(from.data_bytes_);
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_channels() != 0) {
    _internal_set_channels(from._internal_channels());
  }
  if (from._internal_depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageProto::CopyFrom(const ImageProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloopencv.ImageProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProto::IsInitialized() const {
  return true;
}

void ImageProto::InternalSwap(ImageProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_bytes_.InternalSwap(&other->data_bytes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageProto, depth_)
      + sizeof(ImageProto::depth_)
      - PROTOBUF_FIELD_OFFSET(ImageProto, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2eproto_getter, &descriptor_table_opencv_2eproto_once,
      file_level_metadata_opencv_2eproto[0]);
}

// ===================================================================

class OpencvRequest::_Internal {
 public:
};

OpencvRequest::OpencvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  images_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:helloopencv.OpencvRequest)
}
OpencvRequest::OpencvRequest(const OpencvRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:helloopencv.OpencvRequest)
}

inline void OpencvRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpencvRequest::~OpencvRequest() {
  // @@protoc_insertion_point(destructor:helloopencv.OpencvRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpencvRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpencvRequest::ArenaDtor(void* object) {
  OpencvRequest* _this = reinterpret_cast< OpencvRequest* >(object);
  (void)_this;
}
void OpencvRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpencvRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpencvRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:helloopencv.OpencvRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpencvRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helloopencv.OpencvRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .helloopencv.ImageProto images = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpencvRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloopencv.OpencvRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helloopencv.OpencvRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .helloopencv.ImageProto images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helloopencv.OpencvRequest)
  return target;
}

size_t OpencvRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helloopencv.OpencvRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .helloopencv.ImageProto images = 2;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpencvRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpencvRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpencvRequest::GetClassData() const { return &_class_data_; }

void OpencvRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpencvRequest *>(to)->MergeFrom(
      static_cast<const OpencvRequest &>(from));
}


void OpencvRequest::MergeFrom(const OpencvRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloopencv.OpencvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpencvRequest::CopyFrom(const OpencvRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloopencv.OpencvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpencvRequest::IsInitialized() const {
  return true;
}

void OpencvRequest::InternalSwap(OpencvRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  images_.InternalSwap(&other->images_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpencvRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2eproto_getter, &descriptor_table_opencv_2eproto_once,
      file_level_metadata_opencv_2eproto[1]);
}

// ===================================================================

class OpencvReply::_Internal {
 public:
  static const ::helloopencv::ImageProto& images(const OpencvReply* msg);
};

const ::helloopencv::ImageProto&
OpencvReply::_Internal::images(const OpencvReply* msg) {
  return *msg->images_;
}
OpencvReply::OpencvReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:helloopencv.OpencvReply)
}
OpencvReply::OpencvReply(const OpencvReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_images()) {
    images_ = new ::helloopencv::ImageProto(*from.images_);
  } else {
    images_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:helloopencv.OpencvReply)
}

inline void OpencvReply::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
images_ = nullptr;
}

OpencvReply::~OpencvReply() {
  // @@protoc_insertion_point(destructor:helloopencv.OpencvReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpencvReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete images_;
}

void OpencvReply::ArenaDtor(void* object) {
  OpencvReply* _this = reinterpret_cast< OpencvReply* >(object);
  (void)_this;
}
void OpencvReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpencvReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpencvReply::Clear() {
// @@protoc_insertion_point(message_clear_start:helloopencv.OpencvReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && images_ != nullptr) {
    delete images_;
  }
  images_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpencvReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "helloopencv.OpencvReply.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .helloopencv.ImageProto images = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_images(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpencvReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloopencv.OpencvReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "helloopencv.OpencvReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .helloopencv.ImageProto images = 2;
  if (this->_internal_has_images()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::images(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:helloopencv.OpencvReply)
  return target;
}

size_t OpencvReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:helloopencv.OpencvReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .helloopencv.ImageProto images = 2;
  if (this->_internal_has_images()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *images_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpencvReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpencvReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpencvReply::GetClassData() const { return &_class_data_; }

void OpencvReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpencvReply *>(to)->MergeFrom(
      static_cast<const OpencvReply &>(from));
}


void OpencvReply::MergeFrom(const OpencvReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloopencv.OpencvReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_images()) {
    _internal_mutable_images()->::helloopencv::ImageProto::MergeFrom(from._internal_images());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpencvReply::CopyFrom(const OpencvReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloopencv.OpencvReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpencvReply::IsInitialized() const {
  return true;
}

void OpencvReply::InternalSwap(OpencvReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(images_, other->images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpencvReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opencv_2eproto_getter, &descriptor_table_opencv_2eproto_once,
      file_level_metadata_opencv_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace helloopencv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::helloopencv::ImageProto* Arena::CreateMaybeMessage< ::helloopencv::ImageProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helloopencv::ImageProto >(arena);
}
template<> PROTOBUF_NOINLINE ::helloopencv::OpencvRequest* Arena::CreateMaybeMessage< ::helloopencv::OpencvRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helloopencv::OpencvRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::helloopencv::OpencvReply* Arena::CreateMaybeMessage< ::helloopencv::OpencvReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::helloopencv::OpencvReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
